/------------------------------------------------------------------------------/
*****ПІДКЛЮЧЕННЯ СКРИПТА****
/------------------------------------------------------------------------------/

 <script src="./path"></script>



/------------------------------------------------------------------------------/
*****ВИВІД У КОНСОЛЬ*****
/------------------------------------------------------------------------------/

console.log(X);



/------------------------------------------------------------------------------/
*****ЗМІННІ*****
/------------------------------------------------------------------------------/


let name = X;
const name = X;
var name = X; //Не актуально


/------------------------------------------------------------------------------/
*****ТИПИ ДАННИХ*****
/------------------------------------------------------------------------------/


Boolean - True, False;

Undefinded - означает, что переменной было объявлено, но ей не было присвоено никакого значения.;

Null -  представляет собой специальное значение, которое используется для указания на "ничто" или "пустоту".;

Numbers - Числа, як цілі, так і з плаваючою крапкою;

Strings - строки;

Objects - let obj = { key: 'value' }; Создаёт базу, где хранятся определённые ключи *Например возраст и имя*, и информация к ним. Т.е.
об объекте, let person = { тame: 'Vasya', фge: 13}; Визивається через точку, або у квадратних скобках:
console.log(person.name); // Выведет: Vasya
або console.log(person['age']); // Выведет: 13
Объекты могут быть также созданы с помощью конструктора new Object(): | let car = new Object(); car.make = 'Toyota'; car.model = 'Camry'; car.year = 2020;

Arrays - масиви: let arr = [1, 2, 3];

Функции - задається через: 
function ім'я(аргументи) {
	console.log('This is a function');
} // Объявляем функцию с именем myFunction();


/------------------------------------------------------------------------------/
*****ДОПОМІЖНІ ФУНКЦІЇ*****
/------------------------------------------------------------------------------/


Щоб дізнатися тип данних у консолі:
console.log(typeof X || "ads" || True)

Щоб перевести str в int:
console.log(Number("str"));

Перевірка на число:
console.log(Number.isNaN("str")); //Виведе False

Для виводу цілих чисел, якщо в інпуті є букви:
console.log(Number.parseInt("5dsd")) // 5
console.log(Number.parseInt("12.2das12")) // 12
console.log(Number.parseInt("10das230daw")) // 10
console.log(Number.parseInt("ssccdsd")) // NaN

Для виводу дробових чисел, якщо в інпуті є букви:
console.log(Number.parseFloat("5dsd")) // 5
console.log(Number.parseFloat("12.2das12")) // 12.2 *****
console.log(Number.parseFloat("10das230daw")) // 10
console.log(Number.parseFloat("ssccdsd")) // NaN

Складання дробових чисел:
Ми не можемо складати .1 + .2 !== .3 - Хз чому
Але ми можемо зробити так (.1*10 + .2*10)/10 = .3



/------------------------------------------------------------------------------/
***** Math *****
/------------------------------------------------------------------------------/

Math.abs(x): Возвращает абсолютное значение числа x.
console.log(Math.abs(-5)); // Выведет: 5

Math.ceil(x): Возвращает наименьшее ЦЕЛОЕ число, БОЛЬШЕЕ или равное указанному числу x.
console.log(Math.ceil(4.1)); // Выведет: 5

Math.floor(x): Возвращает наибольшее ЦЕЛОЕ число, МЕНЬШЕЕ или равное указанному числу x.
console.log(Math.ceil(4.1)); // Выведет: 4

Math.round(x): Возвращает значение числа x, округленное до ближайшего целого числа.
console.log(Math.round(4.4)); // Выведет: 4
console.log(Math.round(4.6)); // Выведет: 5

Math.max(x, y, ...): Возвращает наибольшее из переданных аргументов. Очень полезно для сортировки
console.log(Math.max(5, 10, 20)); // Выведет: 20

Math.min(x, y, ...): противоположное предыдущему

Math.random(): Возвращает псевдослучайное число с плавающей запятой в интервале от 0 до 1 (включительно).
console.log(Math.random()); // Выведет случайное число в интервале [0, 1]

Math.sqrt(x): Возвращает квадратный корень числа x.
console.log(Math.sqrt(25)); // Выведет: 5

Math.pow(x,y) - повертає х в у степіні
Math.pow(2,4) - 16




/------------------------------------------------------------------------------/
***** Strings *****
/------------------------------------------------------------------------------/



let str1 = "txt";
let str2 = 'txt';
let str3 = `Hello ${name}`
const str4 = "js"+"is"+"me";

***** Конкатенація *****

let age = 30;

let firstName = 'John';
let lastName = 'Doe';

let fullName = firstName + ' ' + lastName;
console.log(fullName); // Выведет: John Doe

let message = 'Привет, меня зовут ' + fullName + ' и мне ' + age + ' лет.';
console.log(message); // Выведет: Привет, меня зовут John Doe и мне 30 лет.

*****Error*****
let result;
result = 5 + "5"; //55
result = 5 + 5 + "5"; //105
result = 5 + "5" + 5; //555
*****Error*****

***** методи строк *****

length: Возвращает длину строки
let str = 'Hello';
console.log(str.length); // Выведет: 5

charAt(index): Возвращает символ в указанной позиции (индексе) строки
let str = 'Hello';
console.log(str.charAt(0)); // Выведет: H

toUpperCase(): Преобразует все символы строки в верхний регистр
let str = 'Hello';
console.log(str.toUpperCase()); // Выведет: HELLO

toLowerCase(): Преобразует все символы строки в нижний регистр.
let str = 'Hello';
console.log(str.toLowerCase()); // Выведет: hello

indexOf(substring): Возвращает индекс (позицию) первого вхождения подстроки в строку. Если подстрока не найдена, возвращает -1
let str = 'Hello, world';
console.log(str.indexOf('world')); // Выведет: 7 так как 7-индекс начала слова world4

slice(start, end): Извлекает часть строки и возвращает новую строку, начиная с позиции start до end (не включая).
let str = 'Hello, world';
console.log(str.slice(0, 5)); // Выведет: Hello

replace(searchValue, replaceValue): Заменяет первое вхождение searchValue на replaceValue.
let str = 'Hello, world';
console.log(str.replace('world', 'JavaScript')); // Выведет: Hello, JavaScript

split(separator): Разбивает строку на массив подстрок, используя разделитель separator.
let str = 'apple,banana,orange';
console.log(str.split(',')); // Выведет: ['apple', 'banana', 'orange']

trim(): Удаляет пробельные символы с начала и конца строки.
let str = '  Hello, world  ';
console.log(str.trim()); // Выведет: Hello, world


includes:
let str = 'Hello, world';

console.log(str.includes('world')); // Выведет: true
console.log(str.includes('World')); // Выведет: false, так как поиск чувствителен к регистру
console.log(str.includes('Hello')); // Выведет: true
console.log(str.includes('lo', 3)); // Выведет: true, поиск начинается с позиции 3



/------------------------------------------------------------------------------/
***** Objects *****
/------------------------------------------------------------------------------/

/* Objects - let obj = { key: 'value' }; Создаёт базу, где хранятся определённые ключи *Например возраст и имя*, и информация к ним. Т.е.
об объекте, let person = { тame: 'Vasya', фge: 13}; Визивається через точку, або у квадратних скобках:

console.log(person.name); // Выведет: Vasya
або console.log(person['age']); // Выведет: 13

**** МЕТОДИ ****

Объекты могут быть также созданы с помощью конструктора new Object(): |
let car = new Object();
car.make = 'Toyota';
car.model = 'Camry';
car.year = 2020; */

delete person.name; // видаляє данні ключа.

Якщо у ключа стоїть пробіл "Мій ключ", то при його визові використовують ["Мій ключ"] замість."Мій ключ"

Цикл для об'єкту for in:
let person = { name: 'Vasya', age: 13};

for(let key in person){
	console.log(key); //перебере тільки ключі  name, age;
	console.log(person[key]); //перебере тільки данні Vasya, 13
}

якщо ключі будут числами, то вони впорядкуються

Цикл для об'єкту for in:
let person = { 4: 'Vasya', 2: 13};

for(let key in person){
	console.log(key); // 2, 4
}



/------------------------------------------------------------------------------/
***** Ввід/вивід данних *****
/------------------------------------------------------------------------------/


//вивід

console.log(...); - вивід у КОНСОЛЬ
alert(...); - Повідомлення зверху

//Ввід

confirm(...); Задає питання, поверне true/false
prompt(...); Задає питання із відкритою відповіддю.



/------------------------------------------------------------------------------/
***** Оператори *****
/------------------------------------------------------------------------------/



****Математичні****

Додавання +
Віднімання -
Множення *
Ділення /
Возведення у степінь **
(2**4)=16
Остача від ділення %
(15 % 4) = 3 

****Логічні****

>, < більше менше
>=, <= більше-дорівнює, менше-дорівнює
==, != - дорівнює, не дорівнює
===, !== - строго дорівнює, строго не дорівнює

== приведення до типу

**** or - ||, and = &&, not - ! ****

**** Тернарний Оператор ****

працює як if else: 
***якщо умова ? то роби це : якщо ні, то це;***

if(){} else{}

**** swith case ****
switch(x){
	case "значення x":
		дія;
		break;

	case "значення x":
		дія;
		break;

	case "значення x":
		дія;
		break;

		default: console.log("invalid search")
}


/------------------------------------------------------------------------------/
***** Цикли *****
/------------------------------------------------------------------------------/


while - while (i < 5) доки умова є істиною {
    console.log(i);
    i++;
}
do while - do {   виконується мінімум 1 раз, а потім як звичайний while
    console.log(i);
    i++;
} while (i < 5);
for - for (let i = 0; i < 5; i++) {}
for in - for (const key in obj)
for off - for (const value of arr)

break - вихід із циклу && continue - продовжує цикл 



/------------------------------------------------------------------------------/
***** Масиви *****
/------------------------------------------------------------------------------/


let arr = ["","",""];
виклик arr[]
arr[x] = Lemonka - заміняти, або додавати
arr.length - дізнатися довжину

масив може мати різні типи даних у переліку

arr.push() - додає у кінець массиву елемент
arr.pop() - видаляє

arr.shift() - видаляє перший елемент
arr.unshift() - додає перший елемент

for off - for (const value of arr) - перелік массиву

двохвимірний масив - let matrix = [[...],[...],[...]]

matrix[x][y]



/------------------------------------------------------------------------------/
***** методи присвоєння *****
/------------------------------------------------------------------------------/


Різниця між примітивними типами і не примітивними - примітивні типи
копіюються за допомогою by value: let a = 1; let b = a;

не примітивні (об'єкти та масиви) - копіюються за посиланням:
let arr = [..];
let arr2 = arr; - якщо я зміню arr.push() то зміниться і arr2



/------------------------------------------------------------------------------/
***** методи масиву *****
/------------------------------------------------------------------------------/


let arr = ["a","b","c"];
let arr2 = [1,2,3];

delete arr[index]; - видаляє значення, але не видаляє ключ, тобто масив
не зміниться у розмірі

arr.splice(з якого індексу, скільки елементів); - видаляє ключ

Як додати 1 масив до другого? arr.concat(arr2, str,int ); // a,b,c,1,2,3

arr.indexOf(елемент, оптимально з якого индексу шукати)
arr.lastIndexOf - те саме що й минуле, але навпаки
arr.includes - перевіряє наявність елементу у масиві

Метод forEach() в JavaScript - удобный инструмент для перебора элементов
массива и выполнения определенной операции над каждым из них.
Вот основные моменты о нем:

array.forEach(function(currentValue, index, array) {
  // код, который будет выполняться для каждого элемента
});

currentValue: значение текущего элемента в массиве.
index: индекс текущего элемента в массиве (опционально).
array: сам массив (опционально).


let arr = [
	{ id: 1, name: cherry },
	{ id: 2, name: tomat },
	{ id: 3, name: apple },
	{ id: 4, name: obricos },
];


find,filter

Якщо масив об'єктів:**** arr.find(item=> item.id === id ) **** // выдаст name
тільки це шукає лише 1 збіг, якщо потрібно шукати всі збіги то:
arr.filter(item=> item.id /*>,<,===,!==...*/ 2)

map

let result = arr.map(item=> item.name.length) - цей приклад поверне довжину всіх елементів
arr.map(умовна-назва=> умовна-назва.name/*або іd об'єкту в arr*/.метод)

split

створює масив з строки, наприклад

let names = "Аня, Ваня, Маша, Даша";
let arr = names.split(", "/*Якими символами розділяти на об'єкти масиву*/); 

join

зворотня дія до split

let newStr = arr.join("Що буде розділяти");

reduce

let red = arr.reduse((summ,item)=>summ+item); summ - зберігає минуле значення, ітем це перелік значень => минула сума + ітем.
рівносильно:
let summ = 0;
for(let i = 0; i<=arr.length;i++){
	summ += arr[i];
}


/------------------------------------------------------------------------------/
***** ФУНКЦІЇ *****
/------------------------------------------------------------------------------/


function FuName (arguments){...}
Виклик: FuName();

function expression: Функційний вираз - Функційні вирази доступні тільки після того, як вони були оголошені у коді.
Це означає, що ви не зможете викликати функційний вираз до того моменту, коли ви його не оголосите.

const FuName = function (){...}
Виклик: FuName();

****псевдомасив - arguments**** - Якщо ми не знаємо скільки саме у нас буде аргументів у Функції, то arguments має у собі додаткове місце
function(){
	const arg = Array.from(arguments);
}

****callback****

Callback - це функція, яку ви передаєте як аргумент у
іншу функцію, і яка буде викликана (або "зворотно викликана")
у майбутньому, після завершення певної операції або події.

function callback(question, yes, no) { //конкретно у цьому прикладі буде виконана одна з функцій coutYes або coutNo, в залежності від дії confirm(question)
	if (confirm(question)) {
		yes();
	} else {
		no();
	}
}
function coutYes() {  // - Callback
	console.log('you say yes'); - 
}
function coutNo() { // - Callback
	console.log('you say no');
}
callback('Yes or not?', coutYes, coutNo);


****return**** - якщо вже є return то далі код не виконується:
{if(age>18) return console.log(hello!); return console.log(Bye!);}

/------------------------------------------------------------------------------/
***** СТРІЛКОВІ ФУНКЦІЇ *****
/------------------------------------------------------------------------------/


const FuName = ()=>{...}


/------------------------------------------------------------------------------/
***** Підключення коду HTML *****
/------------------------------------------------------------------------------/


console.log(document);


console.log(document);

const inputRef = document.querySelector('input[name="number"]');
//создаём переменную = document/*это и есть HTML файл*/.querySelector /*выделяем что хотим выбрать*/('input[name="number"]'); //синтаксис сохранять.
const buttonRef = document.querySelector('button'); // таким-же методом выбираем кнопку, которая будет работать с данными input`a
buttonRef.addEventListener('click', () => { //это и есть логика отправки данных из input`a: ивент "клик" создаёт стрелковую функцию которая выводит значение input`a 
	console.log(inputRef.value);
});


/------------------------------------------------------------------------------/
***** Замикання *****
/------------------------------------------------------------------------------/

function outerFunction() {
  let outerVariable = 'Зовнішня змінна';

  function innerFunction() {
    console.log(outerVariable);
  }

  return innerFunction;
}

const innerFunc = outerFunction();
innerFunc(); // Виведе: Зовнішня змінна

Замикання (closure) - це ключовий аспект функціонального 
програмування в JavaScript. Замикання виникає, коли внутрішня 
функція (завернута функція) має доступ до змінних
зовнішньої функції, навіть після того, як зовнішня функція завершила свою роботу.

****Або так****

function createUrl(domain) {
	return function (url) {
		return `https://${url}.${domain}`;
	};
}

const Num = createUrl('edu');
console.log(Num('genius.space'));



/------------------------------------------------------------------------------/
***** this *****
/------------------------------------------------------------------------------/

потрібен для універсального використання функцій та конструкторів

Приклад: 

const Ivan = {
	name: "Ivan",
	age: 31,
	func: function (){
		console.log(`name is ${this.name}`);
		console.log(`age is ${this.age}`);
	},
}

const Anna = {
	name: "Anna",
	age: 12,
}

Ivan.func(); // виведе name is Іван; age is 31;
Ivan.func.bind(Anna)(); // виведе name is Anna; age is 12; // bind(Anna) - створює аналогічну функцію у Анні

Для того щоб додати аргумент до функції bind(Anna, аргумент)



/------------------------------------------------------------------------------/
***** call *****
/------------------------------------------------------------------------------/



const Ivan = {
	name: "Ivan",
	age: 31,
	func: function (){
		console.log(`name is ${this.name}`);
		console.log(`age is ${this.age}`);
	},
}

const Anna = {
	name: "Anna",
	age: 21,
}

Ivan.func.call(Anna, Аргумент) - просто викликає цю функцію

/------------------------------------------------------------------------------/
***** приклад виконання this *****
/------------------------------------------------------------------------------/


const message = function (name) {
	console.log(`Hello, dear ${name}`);
	console.log(`Welcome to ${this.hotel}. ${this.stars} stars hotel.`);
};

const Bukovel = {
	hotel: 'Bukovel',
	stars: 5,
};
const Dnypro = {
	hotel: 'Dnypro',
	stars: 3,
};
const Vivien = {
	hotel: 'Vivien',
	stars: 2,
};

message.call(Bukovel, 'Ivan');
message.call(Dnypro, 'Anna');
message.call(Vivien, 'Danylo');



також є apply: message.apply(Bukovel, ['Ivan', передаєте масив]);


//=====================================================//


const cart = {
	ShowItems() {
		console.log('У корзині ', this.type, ' розміру ', this.size);
	},
};

const woman = {
	type: ['Туфлі', 'Сукня'],
	size: 'XS',
};
const man = {
	type: ['Футболка', 'Кофта'],
	size: 'XL',
};
const kid = {
	type: ['Майка', 'Шорти'],
	size: 'M',
};

const WomRef = document.querySelector('#wom');
const ManRef = document.querySelector('#man');
const KidRef = document.querySelector('#kid');

WomRef.addEventListener('click', cart.ShowItems.bind(woman));
ManRef.addEventListener('click', cart.ShowItems.bind(man));
KidRef.addEventListener('click', cart.ShowItems.bind(kid));




/------------------------------------------------------------------------------/
***** ООП Класи об'єкти *****
/------------------------------------------------------------------------------/

//======Класи 


//==об'єкт

const credit = {
	amount: 20000,
	month: 12,
	p: 1000,
	result() {
		return this.amount + this.p * this.month;
	},
};

console.log(credit.result());

об'єкт - екземпляр класу.
інтерфейс - набір методів класу.

В ООП є 4 "кити", на яких воно тримається:

****Інкапсуляція - спосіб закрити доступ до 
даних користувачу, залишивши тільки методи інтерфейсу

****Абстракція - 

****Спадкування - спосіб створення нового класу на основі материнського

****Поліморфізм - використання одного і тогож методу багаторазово

//==клас

class Bank {
	static type = 'bank'; // static не дозволяє використовувати данні ззовні
	constructor(options) {
		this.summ = options.summ;
		this.month = options.month;
		this.p = options.p;
	}
	credit() {
		return console.log(this.summ + this.p * this.month);
	}
}

const userBank = new Bank({
	summ: 30000,
	month: 5,
	p: 500,
});

userBank.credit();


//====Спадкування

class Private extends Bank {
	constructor(options) {
		super(options);
		this.card = options.card;
	}
	credit() {
		super.credit(); //Також можна копіювати методи, а не переписувати їх
		return console.log(this.summ + this.p * this.month + ' ' + this.card);
	} // дочірні класи можуть переписувати методи під себе
}

const userBank = new Private({
	summ: 30000,
	month: 5,
	p: 500,
	card: 'Visa',
});

userBank.credit();

//=====get & set

class user {
	constructor(props /* назва не має значення*/) {
		this.name = props.name;
	}
	firstName = '';
	lastName = '';
	age = '';
	city = '';
	set name(newName) {
		const nameRow = newName.split(' ');
		this.firstName = nameRow[0];
		this.lastName = nameRow[1];
	}

	get name() {
		return `First name : ${this.firstName}. Last name : ${this.lastName}`;
	}
}

const Dara = new user({
	name: 'Daria Bila',
});

console.log(Dara);


//===prototype прототип

const a = {
	x: 1,
	y: 2,
}

const b = Object.create(a); // посилання до першого об'єкту

приклад:

const Manager = function (name, sales) {
	this.name = name;
	this.sales = sales;
};

const ann = new Manager('Anna', 5);
const ivan = new Manager('Ivan', 15);

Manager.prototype.sale = function () {
	this.sales += 1;
}; //створює новий прототип за для економії пам'яті
//тепер екземпляри класу можуть не копіювати собі цей метод
// а просто посилатися на цей прототип

console.log(ann.sales);
ann.sale();
console.log(ann.sales);


захищені поля позначають так: _name
#name